// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  online    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages    Message[]
  memberships Membership[]
  reactions   Reaction[]
}

model Channel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        ChannelType @default(PUBLIC)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  messages    Message[]
  memberships Membership[]
}

model Message {
  id         String   @id @default(cuid())
  content    String
  channelId  String
  userId     String
  timestamp  DateTime @default(now())
  editedAt   DateTime?
  isEdited   Boolean  @default(false)

  // Relations
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Reaction {
  id         String  @id @default(cuid())
  emoji      String
  messageId  String
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT_MESSAGE
}